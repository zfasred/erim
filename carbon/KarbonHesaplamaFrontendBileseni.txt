import React, { useState, useEffect } from 'react';
import { Calendar, Factory, Truck, Package, FileText, Download, TrendingUp, AlertCircle, Check } from 'lucide-react';

const CarbonCalculator = () => {
  const [activeTab, setActiveTab] = useState('scope1');
  const [formData, setFormData] = useState({
    company_id: 1,
    year: 2025,
    month: 1,
    scope1: {
      stationary: [],
      mobile: []
    },
    scope2: [],
    scope3: [],
    scope4: [],
    products: []
  });
  const [emissionFactors, setEmissionFactors] = useState([]);
  const [calculationResult, setCalculationResult] = useState(null);
  const [loading, setLoading] = useState(false);

  // Örnek veri için başlangıç değerleri
  useEffect(() => {
    // Örnek emisyon faktörleri
    setEmissionFactors([
      { id: 1, name: 'Doğalgaz', type: 'FUEL', unit: 'm³', co2_factor: 56100 },
      { id: 2, name: 'Motorin', type: 'FUEL', unit: 'litre', co2_factor: 74100 },
      { id: 3, name: 'Elektrik', type: 'ELECTRICITY', unit: 'kWh', co2_factor: 0.442 },
      { id: 4, name: 'Çelik', type: 'MATERIAL', unit: 'kg', co2_factor: 1.85 },
      { id: 5, name: 'Dökme Demir', type: 'MATERIAL', unit: 'kg', co2_factor: 2.00 }
    ]);
  }, []);

  // Kapsam 1 - Sabit Yanma Girişi
  const addScope1Stationary = () => {
    const newItem = {
      fuel_name: '',
      consumption_value: 0,
      consumption_unit: 'm³',
      factor_name: 'Doğalgaz'
    };
    setFormData(prev => ({
      ...prev,
      scope1: {
        ...prev.scope1,
        stationary: [...prev.scope1.stationary, newItem]
      }
    }));
  };

  // Kapsam 1 - Mobil Yanma Girişi
  const addScope1Mobile = () => {
    const newItem = {
      fuel_name: '',
      consumption_value: 0,
      consumption_unit: 'litre',
      factor_name: 'Motorin'
    };
    setFormData(prev => ({
      ...prev,
      scope1: {
        ...prev.scope1,
        mobile: [...prev.scope1.mobile, newItem]
      }
    }));
  };

  // Kapsam 2 - Elektrik Girişi
  const addScope2 = () => {
    const newItem = {
      facility_name: '',
      electricity_kwh: 0
    };
    setFormData(prev => ({
      ...prev,
      scope2: [...prev.scope2, newItem]
    }));
  };

  // Kapsam 3 - Ulaşım Girişi
  const addScope3 = () => {
    const newItem = {
      transport_type: 'DOWNSTREAM',
      description: '',
      fuel_consumption: 0,
      vehicle_type: 'Kamyon',
      factor_name: 'Motorin'
    };
    setFormData(prev => ({
      ...prev,
      scope3: [...prev.scope3, newItem]
    }));
  };

  // Kapsam 4 - Malzeme Girişi
  const addScope4 = () => {
    const newItem = {
      material_name: '',
      quantity_kg: 0,
      factor_name: 'Çelik'
    };
    setFormData(prev => ({
      ...prev,
      scope4: [...prev.scope4, newItem]
    }));
  };

  // Ürün Girişi
  const addProduct = () => {
    const newItem = {
      product_name: '',
      annual_production: 0,
      annual_weight_kg: 0
    };
    setFormData(prev => ({
      ...prev,
      products: [...prev.products, newItem]
    }));
  };

  // Hesaplama fonksiyonu (simülasyon)
  const calculateCarbon = () => {
    setLoading(true);
    
    // Simülasyon için örnek hesaplama
    setTimeout(() => {
      const mockResult = {
        success: true,
        results: {
          scopes: {
            scope1: { total: 18049.12, unit: 'tCO2e' },
            scope2: { total: 6995.34, unit: 'tCO2e' },
            scope3: { total: 206.48, unit: 'tCO2e' },
            scope4: { total: 15354.70, unit: 'tCO2e' }
          },
          total_emission: 40605.64,
          product_allocations: formData.products.map(p => ({
            ...p,
            co2e_per_unit: (40605.64 / formData.products.length / (p.annual_production || 1)).toFixed(4)
          }))
        }
      };
      
      setCalculationResult(mockResult.results);
      setLoading(false);
    }, 1500);
  };

  // Tab içeriği render fonksiyonları
  const renderScope1Tab = () => (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
          <Factory className="w-5 h-5" />
          Sabit Yanma Emisyonları
        </h3>
        <button
          onClick={addScope1Stationary}
          className="mb-3 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          + Doğalgaz/Yakıt Ekle
        </button>
        {formData.scope1.stationary.map((item, index) => (
          <div key={index} className="grid grid-cols-3 gap-3 mb-3 p-3 bg-gray-50 rounded">
            <input
              type="text"
              placeholder="Tesis/Bölüm Adı"
              className="px-3 py-2 border rounded"
              value={item.fuel_name}
              onChange={(e) => {
                const newStationary = [...formData.scope1.stationary];
                newStationary[index].fuel_name = e.target.value;
                setFormData(prev => ({
                  ...prev,
                  scope1: { ...prev.scope1, stationary: newStationary }
                }));
              }}
            />
            <input
              type="number"
              placeholder="Tüketim (m³)"
              className="px-3 py-2 border rounded"
              value={item.consumption_value}
              onChange={(e) => {
                const newStationary = [...formData.scope1.stationary];
                newStationary[index].consumption_value = parseFloat(e.target.value) || 0;
                setFormData(prev => ({
                  ...prev,
                  scope1: { ...prev.scope1, stationary: newStationary }
                }));
              }}
            />
            <select className="px-3 py-2 border rounded">
              <option>Doğalgaz</option>
              <option>LPG</option>
              <option>Fuel Oil</option>
            </select>
          </div>
        ))}
      </div>

      <div>
        <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
          <Truck className="w-5 h-5" />
          Mobil Yanma Emisyonları
        </h3>
        <button
          onClick={addScope1Mobile}
          className="mb-3 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          + Araç Yakıt Ekle
        </button>
        {formData.scope1.mobile.map((item, index) => (
          <div key={index} className="grid grid-cols-3 gap-3 mb-3 p-3 bg-gray-50 rounded">
            <input
              type="text"
              placeholder="Araç/Filo Adı"
              className="px-3 py-2 border rounded"
            />
            <input
              type="number"
              placeholder="Yakıt Tüketimi (litre)"
              className="px-3 py-2 border rounded"
            />
            <select className="px-3 py-2 border rounded">
              <option>Motorin</option>
              <option>Benzin</option>
              <option>LPG</option>
            </select>
          </div>
        ))}
      </div>
    </div>
  );

  const renderScope2Tab = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
        <TrendingUp className="w-5 h-5" />
        Elektrik Tüketimi
      </h3>
      <button
        onClick={addScope2}
        className="mb-3 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        + Elektrik Tüketimi Ekle
      </button>
      {formData.scope2.map((item, index) => (
        <div key={index} className="grid grid-cols-2 gap-3 mb-3 p-3 bg-gray-50 rounded">
          <input
            type="text"
            placeholder="Tesis/Bölüm Adı"
            className="px-3 py-2 border rounded"
            value={item.facility_name}
            onChange={(e) => {
              const newScope2 = [...formData.scope2];
              newScope2[index].facility_name = e.target.value;
              setFormData(prev => ({ ...prev, scope2: newScope2 }));
            }}
          />
          <input
            type="number"
            placeholder="Elektrik Tüketimi (kWh)"
            className="px-3 py-2 border rounded"
            value={item.electricity_kwh}
            onChange={(e) => {
              const newScope2 = [...formData.scope2];
              newScope2[index].electricity_kwh = parseFloat(e.target.value) || 0;
              setFormData(prev => ({ ...prev, scope2: newScope2 }));
            }}
          />
        </div>
      ))}
    </div>
  );

  const renderScope3Tab = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
        <Truck className="w-5 h-5" />
        Ulaşım Emisyonları
      </h3>
      <button
        onClick={addScope3}
        className="mb-3 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        + Ulaşım Ekle
      </button>
      {formData.scope3.map((item, index) => (
        <div key={index} className="grid grid-cols-3 gap-3 mb-3 p-3 bg-gray-50 rounded">
          <select className="px-3 py-2 border rounded">
            <option value="UPSTREAM">Upstream Nakliye</option>
            <option value="DOWNSTREAM">Downstream Nakliye</option>
            <option value="EMPLOYEE">Personel Ulaşımı</option>
            <option value="BUSINESS">İş Seyahatleri</option>
          </select>
          <input
            type="text"
            placeholder="Açıklama"
            className="px-3 py-2 border rounded"
          />
          <input
            type="number"
            placeholder="Yakıt (litre)"
            className="px-3 py-2 border rounded"
          />
        </div>
      ))}
    </div>
  );

  const renderScope4Tab = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
        <Package className="w-5 h-5" />
        Satın Alınan Malzemeler
      </h3>
      <button
        onClick={addScope4}
        className="mb-3 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        + Malzeme Ekle
      </button>
      {formData.scope4.map((item, index) => (
        <div key={index} className="grid grid-cols-3 gap-3 mb-3 p-3 bg-gray-50 rounded">
          <input
            type="text"
            placeholder="Malzeme Adı"
            className="px-3 py-2 border rounded"
            value={item.material_name}
            onChange={(e) => {
              const newScope4 = [...formData.scope4];
              newScope4[index].material_name = e.target.value;
              setFormData(prev => ({ ...prev, scope4: newScope4 }));
            }}
          />
          <input
            type="number"
            placeholder="Miktar (kg)"
            className="px-3 py-2 border rounded"
            value={item.quantity_kg}
            onChange={(e) => {
              const newScope4 = [...formData.scope4];
              newScope4[index].quantity_kg = parseFloat(e.target.value) || 0;
              setFormData(prev => ({ ...prev, scope4: newScope4 }));
            }}
          />
          <select className="px-3 py-2 border rounded">
            <option>Çelik</option>
            <option>Dökme Demir</option>
            <option>Alüminyum</option>
            <option>Plastik</option>
          </select>
        </div>
      ))}
    </div>
  );

  const renderProductsTab = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
        <Package className="w-5 h-5" />
        Ürün Bazlı Dağılım
      </h3>
      <button
        onClick={addProduct}
        className="mb-3 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        + Ürün Ekle
      </button>
      {formData.products.map((item, index) => (
        <div key={index} className="grid grid-cols-3 gap-3 mb-3 p-3 bg-gray-50 rounded">
          <input
            type="text"
            placeholder="Ürün Adı"
            className="px-3 py-2 border rounded"
            value={item.product_name}
            onChange={(e) => {
              const newProducts = [...formData.products];
              newProducts[index].product_name = e.target.value;
              setFormData(prev => ({ ...prev, products: newProducts }));
            }}
          />
          <input
            type="number"
            placeholder="Yıllık Üretim Adedi"
            className="px-3 py-2 border rounded"
            value={item.annual_production}
            onChange={(e) => {
              const newProducts = [...formData.products];
              newProducts[index].annual_production = parseInt(e.target.value) || 0;
              setFormData(prev => ({ ...prev, products: newProducts }));
            }}
          />
          <input
            type="number"
            placeholder="Yıllık Üretim (kg)"
            className="px-3 py-2 border rounded"
            value={item.annual_weight_kg}
            onChange={(e) => {
              const newProducts = [...formData.products];
              newProducts[index].annual_weight_kg = parseFloat(e.target.value) || 0;
              setFormData(prev => ({ ...prev, products: newProducts }));
            }}
          />
        </div>
      ))}
    </div>
  );

  const renderResults = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
        <FileText className="w-5 h-5" />
        Hesaplama Sonuçları
      </h3>
      
      {calculationResult ? (
        <div className="space-y-4">
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex items-center gap-2 text-green-800 mb-2">
              <Check className="w-5 h-5" />
              <span className="font-semibold">Hesaplama Tamamlandı</span>
            </div>
            <div className="text-2xl font-bold text-green-900">
              Toplam Emisyon: {calculationResult.total_emission.toFixed(2)} tCO2e
            </div>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {Object.entries(calculationResult.scopes).map(([scope, data]) => (
              <div key={scope} className="bg-white border rounded-lg p-4">
                <div className="text-sm text-gray-600 mb-1">
                  {scope.toUpperCase()}
                </div>
                <div className="text-xl font-semibold">
                  {data.total.toFixed(2)}
                </div>
                <div className="text-xs text-gray-500">tCO2e</div>
              </div>
            ))}
          </div>

          {calculationResult.product_allocations && calculationResult.product_allocations.length > 0 && (
            <div>
              <h4 className="font-semibold mb-2">Ürün Başına Emisyon</h4>
              <div className="bg-gray-50 rounded-lg p-4">
                {calculationResult.product_allocations.map((product, index) => (
                  <div key={index} className="flex justify-between py-2 border-b last:border-b-0">
                    <span>{product.product_name}</span>
                    <span className="font-medium">
                      {product.co2e_per_unit} tCO2e/adet
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="flex gap-3">
            <button className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 flex items-center gap-2">
              <Download className="w-4 h-4" />
              Excel Olarak İndir
            </button>
            <button className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 flex items-center gap-2">
              <FileText className="w-4 h-4" />
              PDF Rapor Oluştur
            </button>
          </div>
        </div>
      ) : (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <div className="flex items-center gap-2 text-yellow-800">
            <AlertCircle className="w-5 h-5" />
            <span>Henüz hesaplama yapılmadı. Veri girişi yapıp "Hesapla" butonuna tıklayın.</span>
          </div>
        </div>
      )}
    </div>
  );

  const tabs = [
    { id: 'scope1', label: 'Kapsam 1', icon: Factory },
    { id: 'scope2', label: 'Kapsam 2', icon: TrendingUp },
    { id: 'scope3', label: 'Kapsam 3', icon: Truck },
    { id: 'scope4', label: 'Kapsam 4', icon: Package },
    { id: 'products', label: 'Ürünler', icon: Package },
    { id: 'results', label: 'Sonuçlar', icon: FileText },
  ];

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="bg-white rounded-lg shadow-lg">
        {/* Header */}
        <div className="bg-gradient-to-r from-green-600 to-blue-600 text-white p-6 rounded-t-lg">
          <h1 className="text-2xl font-bold mb-2">Karbon Ayak İzi Hesaplama Modülü</h1>
          <div className="flex items-center gap-4 text-sm">
            <div className="flex items-center gap-2">
              <Calendar className="w-4 h-4" />
              <select className="bg-white/20 text-white border-white/30 rounded px-2 py-1">
                <option>2025</option>
                <option>2024</option>
              </select>
            </div>
            <div className="flex items-center gap-2">
              <select className="bg-white/20 text-white border-white/30 rounded px-2 py-1">
                <option>Ocak</option>
                <option>Şubat</option>
                <option>Mart</option>
              </select>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="border-b">
          <div className="flex gap-1 px-6">
            {tabs.map(tab => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center gap-2 px-4 py-3 font-medium transition-colors ${
                    activeTab === tab.id
                      ? 'text-blue-600 border-b-2 border-blue-600'
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  <Icon className="w-4 h-4" />
                  {tab.label}
                </button>
              );
            })}
          </div>
        </div>

        {/* Tab Content */}
        <div className="p-6">
          {activeTab === 'scope1' && renderScope1Tab()}
          {activeTab === 'scope2' && renderScope2Tab()}
          {activeTab === 'scope3' && renderScope3Tab()}
          {activeTab === 'scope4' && renderScope4Tab()}
          {activeTab === 'products' && renderProductsTab()}
          {activeTab === 'results' && renderResults()}
        </div>

        {/* Action Buttons */}
        {activeTab !== 'results' && (
          <div className="border-t px-6 py-4 flex justify-end gap-3">
            <button className="px-4 py-2 text-gray-600 border border-gray-300 rounded hover:bg-gray-50">
              Kaydet (Taslak)
            </button>
            <button
              onClick={calculateCarbon}
              disabled={loading}
              className="px-6 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50 flex items-center gap-2"
            >
              {loading ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                  Hesaplanıyor...
                </>
              ) : (
                <>
                  <TrendingUp className="w-4 h-4" />
                  Hesapla
                </>
              )}
            </button>
          </div>
        )}
      </div>

      {/* Info Box */}
      <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
        <div className="flex items-start gap-3">
          <AlertCircle className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" />
          <div className="text-sm text-blue-800">
            <p className="font-semibold mb-1">Önemli Notlar:</p>
            <ul className="list-disc list-inside space-y-1">
              <li>Emisyon faktörleri dönemsel olarak güncellenmektedir</li>
              <li>GWP değerleri: CH4=27.9, N2O=273 (IPCC AR5)</li>
              <li>Elektrik emisyon faktörü: 0.442 tCO2/MWh (Türkiye şebekesi)</li>
              <li>Tüm hesaplamalar ISO 14064 standardına uygundur</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CarbonCalculator;